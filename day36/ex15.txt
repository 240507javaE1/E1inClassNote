ex29
Given:

public interface Moveable<Integer> {
 
    public default void walk(Integer distance) {
        System.out.println("Walking");
    }
 
    public void run(Integer distance);
}
Which statement is true?

A. Moveable can be used as below:
Moveable<Integer> animal = n -> System.out.println("Running" + n);
animal.run(100);
animal.walk(20);

B. Moveable can be used as below:
Moveable<Integer> animal = n -> n + 10;
animal.run(100);
animal.walk(20);

C. Moveable can be used as below:
Moveable animal = (Integer n) -> System.out.println(n);
animal.run(100);
Moveable.walk(20);

D. Movable cannot be used in a lambda expression.









ex30
Given the definition of the Emp class:

public class Emp {
 
    private String eName;
    private Integer eAge;
 
    Emp(String eN, Integer eA) {
        this.eName = eN;
        this.eAge = eA;
    }
 
    public Integer getEAge() {
        return eAge;
    }
 
    public String getEName() {
        return eName;
    }
}

and code fragment:

List<Emp> li = Arrays.asList(new Emp("Sam", 20), new Emp("John", 60), new Emp("Jim", 51));
Predicate<Emp> agVal = s -> s.getEAge() > 50; //line n1
li = li.stream().filter(agVal).collect(Collectors.toList());
Stream<String> names = li.stream().map(Emp::getEName); //line n2
names.forEach(n -> System.out.print(n + " "));

What is the result?

A.
Sam John Jim

B.
John Jim

C. A compilation error occurs at line n1.

D. A compilation error occurs at line n2.