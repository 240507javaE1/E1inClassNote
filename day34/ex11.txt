ex21
Given:

public class Vehicle {
	int vId;
	String vName;
	public Vehicle(int vIdArg,String vNameArg) {
		this.vId=vIdArg;
		this.vName=vNameArg;	
	}
	
	public int getVid() {return vId;}
	public String getVName() { return vName;}
	public String toString() {
		return vName;	
	}

}

and the code fragment:

List<Vehicle> vehicle=Arrays.asList(
		new Vehicle(2,"Car"),
		new Vehicle(3,"Bike"),
		new Vehicle(1,"Truck"));

vehicle.stream()
		// line n1
		.forEach(System.out::print);
		
		
Which two code fragments, when insert at line n1 independently, enable the code to print
TruckCarBike?

A) .sorted((v1,v2)->Integer.compare(v1.getVId(),v2.getVId()))

B) .sorted(Comparable.comparing(Vehicle::getVName)).reversed()

C) .map(v->v.getVId())
   .sorted()
   
D) .sorted(Comparator.comparing((Vehicle v)->v.getVid()))

E) .sorted((v1,v2)->v1.getVId()<v2.getVId())









Ex22
Given:

class Block {
	String color;
	int size;
	Block(int size,String color) {
		this.size=size;
		this.color=color;	
	}
}

and the code fragment:

List<Block> blocks=new ArrayList<>();
blocks.add(new Block(10,"Green"));
blocks.add(new Block(7,"Red"));
blocks.add(new Block(12,"Blue"));
Collections.sort(blocks,new ColorSorter());

Which definition of the ColorScoter class sorts the blocks list?

A) class ColorSorter implements Comparable<Block> {
   		public boolean compare(Block o1,Block o2) {
   			return o1.color.equals(o2.color);   		
   		}  
   }
   
   
B) class ColorSorter implements Comparator<Block> {
		public int compare(Block o1,Block o2) {
			return o1.color.compareTo(o2.color);		
		}
   }
   
   
C) class ColorSorter implements Comparable<Block> {
		public int compareTo(Block o1,Block o2) {
			return o1.color.compareTo(o2.color);		
		}
   }
   
D) class ColorSorter implements Comparator<Block> {
		public boolean compare(Block o1,Block o2) {
			return o1.color.compareTo(o2.color);
		
		}

   }